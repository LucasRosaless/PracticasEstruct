üß™ Mini Parcial de Pr√°ctica ‚Äì Estructura de Datos y Algoritmos II
Ejercicio 1: POO y Colecciones (PRA1 + TEO4)
Implement√° una clase Curso que represente un curso universitario con los siguientes requisitos:

Almacene estudiantes usando una colecci√≥n apropiada.

Permita:
Agregar estudiantes.
Imprimir la lista de estudiantes.
Buscar un estudiante por nombre.
Obtener la cantidad de estudiantes inscriptos.
Indicaciones:
Usar ArrayList.
Proveer m√©todos bien documentados.
Escribir una clase CursoTest con al menos 3 tests.




Ejercicio 2: Uso de Mapas (PRA3 + TEO5)
Defin√≠ una clase PhoneBook que represente una agenda telef√≥nica, tal como se solicita en la pr√°ctica 3.
 Implement√° los siguientes m√©todos:

addEntry(String nombre, String telefono)
changePhone(String nombre, String nuevoTelefono)
delContact(String nombre)
lookupNumber(String nombre)
getAllContacts()
Adem√°s, escrib√≠ una clase de test PhoneBookTest con casos positivos y negativos.




Ejercicio 3: Herencia y Polimorfismo (PRA4)
Model√° el siguiente escenario:

Clase Person
Subclases: Teacher, Student
Subclase de Student: PhDStudent
Agreg√° atributos relevantes y m√©todos como getRole() que devuelva un String. Luego:
Instanci√° objetos de cada clase en Main.java
Mostr√° qu√© m√©todos se ejecutan en base al tipo din√°mico del objeto.



Ejercicio 4: Pila gen√©rica (PRA5)
Implement√° una clase Pila<T> con las operaciones:

void push(T elemento)
T pop()
T peek()
boolean isEmpty()

Requisitos:
Que todas las operaciones sean de tiempo constante.
Usar una estructura de datos eficiente.
Escrib√≠ una clase de prueba PilaTest.



Ejercicio 5: Balanceo de par√©ntesis (PRA5)
Implement√° un m√©todo:

java
Copiar
Editar
public static boolean estaBalanceado(String cadena)
Que retorne true si la cadena est√° bien balanceada en cuanto a (), [] y {}. Por ejemplo:

[(())] ‚Üí true

[(]) ‚Üí false

